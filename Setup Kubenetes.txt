1. Disabble swap drive
swapoff -a
or 
Comment swap in "nano /etc/fstab", then reboot
N.B. Use "free -m" to verify


2. Installing ebtables ethtool
apt install ebtables ethtool


3. Set "sysctl net.bridge.bridge-nf-call-iptables" to 1 (if the file exits)
sysctl net.bridge.bridge-nf-call-iptables=1


4. Check required ports
	a. Master: 
	Port Range	Purpose
	6443*	Kubernetes API server
	2379-2380	etcd server client API
	10250	Kubelet API
	10251	kube-scheduler
	10252	kube-controller-manager
	10255	Read-only Kubelet API (Heapster)
	b. Worker: 
	Port Range	Purpose
	10250	Kubelet API
	10255	Read-only Kubelet API (Heapster)
	30000-32767	Default port range for NodePort Services. Typically, these ports would need to be exposed to external load-balancers, or other external consumers of the application itself.
sudo ufw allow [port]
or
sudo ufw disable


5. Remove and install docker
a. Uninstall docker
sudo apt-get purge -y docker.io
sudo apt-get autoremove -y --purge docker.io
sudo apt-get autoclean

b. Install docker
apt-get update && apt-get install -y curl apt-transport-https
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/docker.list
deb https://download.docker.com/linux/$(lsb_release -si | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable
EOF
apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')

c. Install nvidia-docker and nvidia-docker-plugin
wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1-1_amd64.deb
sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb
# Test nvidia-smi
nvidia-docker run --rm nvidia/cuda nvidia-smi


6. Installing kubeadm, kubelet and kubectl
apt-get update && apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl


7. For each node, add GPU support to the Kubeadm configuration, while cluster is not initialized.
a. Edit <<NUMBER>>-kubeadm.conf file
sudo nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

b. append ExecStart with the flag —feature-gates="Accelerators=true"
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS [...] --feature-gates="Accelerators=true"

c. Restart kubelet
sudo systemctl daemon-reload
sudo systemctl restart kubelet


8. Initialise Kubenetes
kubeadm reset
rm -rf $HOME/.kube
kubeadm init
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


9. Install a pod network
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
kubectl taint nodes --all node-role.kubernetes.io/master-


10. Join nodes
kubeadm join --token ${token} ${ip:port}


11. Check status
a. kubectl get nodes
b. kubectl get cs
c. kubectl get no ${NODE_NAME} -o yaml
d. kubectl get deployment
e. kubectl get services
f. kubectl get pods
g. kubectl get -w pods
h. kubectl get pods -o wide
i. kubectl get pods --all-namespaces
j. kubectl -n ${NAMESPACE} describe pod ${POD_NAME}


12. Kubedash
kubectl apply -f  kubedash.yaml
kubectl create -f dashboard-admin.yaml
kubectl proxy
Dashboard is now available at http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/


13. Deployment
a. Deployment with command line
kubectl create -f tf-gpu.yaml
kubectl cp ${FILENAME} ${POD}:~
kubectl exec -it ${POD} -- /bin/bash
kubectl exec -it ${POD} --container ${CONTAINER} -- /bin/bash
e.g.
kubectl cp helloWorld.py ${POD}:~
kubectl exec ${POD} python helloWorld.py

b. Deployment with Kubedash
Visit http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
Click on "+ CREATE" button in the top right comer


14. Remove the deployment
a. Remove with command line, e.g.:
kubectl delete service tf-gpu-service
kubectl delete deployments tf-gpu
kubectl get pod
or
kubectl delete service caffe-gpu-service
kubectl delete deployments caffe-gpu
kubectl get pod

b. Remove with Kubedash
Visit http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

